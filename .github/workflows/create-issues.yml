name: create-issues

on: workflow_dispatch

env:
  TEMPLATE_REPO: the-collab-lab/smart-shopping-list
  # For using the GitHub CLI:
  GH_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:
  copy-issues-from-template-repo:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # Need access to this repo to use `gh issue create`
      - name: Get issues JSON from template repo
        id: get-issues-json
        run: |
          gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/$TEMPLATE_REPO/issues > issues.json
          echo "**********"
      - name: Sort issue objects in JSON file by GitHub issue number
        id: sort-issues-json
        # Note: This assumes that we'll always keep the GitHub issues in the template repo
        #  in order. (i.e. The first issue Collabies tackle will have the lowest issue
        #  number, the second issue Collabies tackle will have the next lowest number, and so on.)
        run: |
          jq 'sort_by(.number)' issues.json > issues_sorted.json
          echo "**********"
          cat issues_sorted.json
      - name: Create new GitHub issues in the current repo
        run: |
          NUM_ISSUES=$(jq '. | length' issues_sorted.json)

          for (( i=0; i<${NUM_ISSUES}; i++ )); do
            TITLE=$(jq -r --argjson index $i '.[$index].title' issues_sorted.json)
            echo $TITLE

            # Translation:
            # TITLE=$(...) - Store the result of this expression in a variable called TITLE
            # jq ... issues.json - Use the jq program to filter the JSON object in issues.json
            # -r - This jq flag strips the quotes wrapping the value of the string result
            #   (so that they don't appear in the actual PR title on GitHub)
            # --argjson index $i - Pass the value of the $i variable (from the for loop) to
            #   jq as an argument called index (jq can't use normal variables like i directly)
            #   (Use --argjson, NOT --arg, which uses the value as a string and therefore can't
            #   be used as an array index)
            # '.[$index].title' - From the JSON object in issues.json, get the array element
            #   at the specified index (this represents a single issue object), then get the
            #   value of the `title` field from that issue object.

            # Since the body string can have newlines in it,
            # output the contents to a file instead (so that you don't
            # get errors when using it in the `gh issue create` command).
            BODY=$(jq -r --argjson index $i '.[$index].body' issues_sorted.json)
            echo $BODY > issue_body.txt

            # Use the GitHub CLI to create a new issue with the title and body we pulled
            # from the template repo.
            gh issue create --title "$TITLE" --body-file issue_body.txt

            echo "***********"
          done
